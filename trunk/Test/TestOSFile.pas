unit TestOSFile;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, OSFile, Windows, Dialogs;

type
  // Test methods for class TOSFile
  TConcreteTOSFile = class(TOSFile)
  end;
  TestTOSFile = class(TTestCase)
  strict private
    FOSFile: TConcreteTOSFile;
    const
      DefaultPath = '\\.\TestDrive1';
      DefaultPathUpperCase = '\\.\TESTDRIVE1';
      DefaultPathWithoutPrefix = 'TESTDRIVE1';
    type
      TTestOSFile = class(TOSFile)
      public
        procedure IfOSErrorRaiseException;
      end;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsPathEqual;
    procedure TestGetPathOfFileAccessing;
    procedure TestGetPathOfFileAccessingWithoutPrefix;
    procedure TestIfOSErrorRaiseException;
  end;

implementation

procedure TestTOSFile.SetUp;
begin
  FOSFile := TConcreteTOSFile.Create(DefaultPath);
end;

procedure TestTOSFile.TearDown;
begin
  FOSFile.Free;
  FOSFile := nil;
end;

procedure TestTOSFile.TestIsPathEqual;
var
  ReturnValue: Boolean;
  PathToCompare: string;
begin
  FOSFile.Free;
  FOSFile := TConcreteTOSFile.Create('TeSt');
  PathToCompare := 'TeSt';
  ReturnValue := FOSFile.IsPathEqual(PathToCompare);
  CheckEquals(true, ReturnValue, 'Error comparing same path');
  PathToCompare := 'Test';
  ReturnValue := FOSFile.IsPathEqual(PathToCompare);
  CheckEquals(true, ReturnValue, 'Error comparing case-different path');
  PathToCompare := 'Not Test';
  ReturnValue := FOSFile.IsPathEqual(PathToCompare);
  CheckEquals(false, ReturnValue, 'Error comparing different path');
end;

procedure TestTOSFile.TestGetPathOfFileAccessing;
var
  ReturnValue: string;
begin
  ReturnValue := FOSFile.GetPathOfFileAccessing;
  CheckEquals(DefaultPathUpperCase, ReturnValue);
end;

procedure TestTOSFile.TestGetPathOfFileAccessingWithoutPrefix;
var
  ReturnValue: string;
begin
  ReturnValue := FOSFile.GetPathOfFileAccessingWithoutPrefix;
  CheckEquals(DefaultPathWithoutPrefix, ReturnValue);
end;

procedure TestTOSFile.TTestOSFile.IfOSErrorRaiseException;
begin
  inherited IfOSErrorRaiseException;
end;

procedure TestTOSFile.TestIfOSErrorRaiseException;
const
  ErrorCodeToTest = 501;
var
  TestOSFile: TTestOSFile;
begin
  TestOSFile := TTestOSFile.Create('');
  SetLastError(ErrorCodeToTest);
  StartExpectingException(EOSError);
  TestOSFile.IfOSErrorRaiseException;
  StopExpectingException('OS Error did not checked properly');
  TestOSFile.Free;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTOSFile.Suite);
end.

