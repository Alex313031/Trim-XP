unit TestOS.Version.Helper;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  OS.Version.Helper, Version;

type
  // Test methods for class TWriteBufferSettingVerifier
  TWindowsList = record
    FWindows95: Boolean;
    FWindows98: Boolean;
    FWindows2000: Boolean;
    FWindowsXP: Boolean;
    FWindowsXPSP1: Boolean;
    FWindowsXPSP2: Boolean;
    FWindowsXPSP3: Boolean;
    FWindows2003: Boolean;
    FWindowsVista: Boolean;
    FWindows7: Boolean;
    FWindows8: Boolean;
    FWindows81: Boolean;
    FWindows10: Boolean;
  end;
  TFunctionToTest = reference to function (const Version: TVersion): Boolean;
  TestOSVersionHelper = class(TTestCase)
  strict private
    procedure TestAs(const TestContents: String;
      const WindowsList: TWindowsList; const TestFunction: TFunctionToTest);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsBelowVista;
    procedure TestIsBelowWindows8;
  end;

implementation

procedure TestOSVersionHelper.SetUp;
begin
end;

procedure TestOSVersionHelper.TearDown;
begin
end;

procedure TestOSVersionHelper.TestAs(const TestContents: String;
  const WindowsList: TWindowsList; const TestFunction: TFunctionToTest);
const
  Windows95: TVersion = (FMajorVer: 4; FMinorVer: 0; FBuildVer: 0);
  Windows98: TVersion = (FMajorVer: 4; FMinorVer: 10; FBuildVer: 0);
  Windows2000: TVersion = (FMajorVer: 5; FMinorVer: 0; FBuildVer: 0);
  WindowsXP: TVersion = (FMajorVer: 5; FMinorVer: 1; FBuildVer: 0);
  WindowsXPSP1: TVersion = (FMajorVer: 5; FMinorVer: 1; FBuildVer: 1);
  WindowsXPSP2: TVersion = (FMajorVer: 5; FMinorVer: 1; FBuildVer: 2);
  WindowsXPSP3: TVersion = (FMajorVer: 5; FMinorVer: 1; FBuildVer: 3);
  Windows2003: TVersion = (FMajorVer: 5; FMinorVer: 2; FBuildVer: 0);
  WindowsVista: TVersion = (FMajorVer: 6; FMinorVer: 0; FBuildVer: 0);
  Windows7: TVersion = (FMajorVer: 6; FMinorVer: 1; FBuildVer: 0);
  Windows8: TVersion = (FMajorVer: 6; FMinorVer: 2; FBuildVer: 0);
  Windows81: TVersion = (FMajorVer: 6; FMinorVer: 3; FBuildVer: 0);
  Windows10: TVersion = (FMajorVer: 10; FMinorVer: 0; FBuildVer: 0);
begin
  CheckEquals(WindowsList.FWindows95, TestFunction(Windows95),
    TestContents + ' Windows 95');
  CheckEquals(WindowsList.FWindows98, TestFunction(Windows98),
    TestContents + ' Windows 98');
  CheckEquals(WindowsList.FWindows2000, TestFunction(Windows2000),
    TestContents + ' Windows 2000');
  CheckEquals(WindowsList.FWindowsXP, TestFunction(WindowsXP),
    TestContents + ' Windows XP');
  CheckEquals(WindowsList.FWindowsXPSP1, TestFunction(WindowsXPSP1),
    TestContents + ' Windows XP SP1');
  CheckEquals(WindowsList.FWindowsXPSP2, TestFunction(WindowsXPSP2),
    TestContents + ' Windows XP SP2');
  CheckEquals(WindowsList.FWindowsXPSP3, TestFunction(WindowsXPSP3),
    TestContents + ' Windows XP SP3');
  CheckEquals(WindowsList.FWindows2003, TestFunction(Windows2003),
    TestContents + ' Windows 2003');
  CheckEquals(WindowsList.FWindowsVista, TestFunction(WindowsVista),
    TestContents + ' Windows Vista');
  CheckEquals(WindowsList.FWindows7, TestFunction(Windows7),
    TestContents + ' Windows 7');
  CheckEquals(WindowsList.FWindows8, TestFunction(Windows8),
    TestContents + ' Windows 8');
  CheckEquals(WindowsList.FWindows81, TestFunction(Windows81),
    TestContents + ' Windows 8.1');
  CheckEquals(WindowsList.FWindows10, TestFunction(Windows10),
    TestContents + ' Windows 10');
end;

procedure TestOSVersionHelper.TestIsBelowVista;
const
  BelowVistaList: TWindowsList = (
    FWindows95: true;
    FWindows98: true;
    FWindows2000: true;
    FWindowsXP: true;
    FWindowsXPSP1: true;
    FWindowsXPSP2: true;
    FWindowsXPSP3: true;
    FWindows2003: true;
    FWindowsVista: false;
    FWindows7: false;
    FWindows8: false;
    FWindows81: false;
    FWindows10: false);
begin
  TestAs('IsBelowVista', BelowVistaList, IsBelowVista);
end;

procedure TestOSVersionHelper.TestIsBelowWindows8;
const
  BelowWin8List: TWindowsList = (
    FWindows95: true;
    FWindows98: true;
    FWindows2000: true;
    FWindowsXP: true;
    FWindowsXPSP1: true;
    FWindowsXPSP2: true;
    FWindowsXPSP3: true;
    FWindows2003: true;
    FWindowsVista: true;
    FWindows7: true;
    FWindows8: false;
    FWindows81: false;
    FWindows10: false);
begin
  TestAs('IsBelowWindows8', BelowWin8List, IsBelowWindows8);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestOSVersionHelper.Suite);
end.

