unit TestBufferInterpreter.SCSI;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, BufferInterpreter.SCSI, Device.SMART.List, SysUtils,
  BufferInterpreter;

type
  // Test methods for class TSCSIBufferInterpreter

  TestTSCSIBufferInterpreter = class(TTestCase)
  strict private
    FSCSIBufferInterpreter: TSCSIBufferInterpreter;
  private
    procedure CompareWithOriginalIdentify(
      const ReturnValue: TIdentifyDeviceResult);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBufferToIdentifyDeviceResult;
    procedure TestBufferToSMARTValueList;
    procedure TestLargeBufferToIdentifyDeviceResult;
    procedure TestLargeBufferToSMARTValueList;
  end;

const
  SM951IdentifyDevice: TSmallBuffer =
    (0, 0, 6, 2, 55, 0, 0, 2, 78, 86, 77, 101, 32, 32, 32, 32, 83, 65, 77, 83
    , 85, 78, 71, 32, 77, 90, 86, 76, 86, 49, 50, 56, 48, 48, 48, 81, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 192, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    );

implementation

procedure TestTSCSIBufferInterpreter.SetUp;
begin
  FSCSIBufferInterpreter := TSCSIBufferInterpreter.Create;
end;

procedure TestTSCSIBufferInterpreter.TearDown;
begin
  FSCSIBufferInterpreter.Free;
  FSCSIBufferInterpreter := nil;
end;

procedure TestTSCSIBufferInterpreter.TestBufferToIdentifyDeviceResult;
var
  ReturnValue: TIdentifyDeviceResult;
  Buffer: TSmallBuffer;
begin
  Buffer := SM951IdentifyDevice;
  ReturnValue := FSCSIBufferInterpreter.BufferToIdentifyDeviceResult(Buffer);
  CompareWithOriginalIdentify(ReturnValue);
end;

procedure TestTSCSIBufferInterpreter.CompareWithOriginalIdentify(
  const ReturnValue: TIdentifyDeviceResult);
begin
  CheckEquals('NVMe    SAMSUNG MZVLV128', ReturnValue.Model);
  CheckEquals('000Q', ReturnValue.Firmware);
  CheckEquals('', ReturnValue.Serial);
  CheckTrue(TSATASpeed.NotSATA = ReturnValue.SATASpeed,
    'TSATASpeed.NotSATA = ReturnValue.SATASpeed');
  CheckEquals(512, ReturnValue.LBASize);
end;

procedure TestTSCSIBufferInterpreter.TestBufferToSMARTValueList;
var
  Buffer: TSmallBuffer;
begin
  StartExpectingException(ENotSupportedException);
  FSCSIBufferInterpreter.BufferToSMARTValueList(Buffer);
  StopExpectingException;
end;

procedure TestTSCSIBufferInterpreter.TestLargeBufferToIdentifyDeviceResult;
var
  ReturnValue: TIdentifyDeviceResult;
  Buffer: TLargeBuffer;
begin
  Move(SM951IdentifyDevice, Buffer, SizeOf(Buffer));
  ReturnValue :=
    FSCSIBufferInterpreter.LargeBufferToIdentifyDeviceResult(Buffer);
  CompareWithOriginalIdentify(ReturnValue);
end;

procedure TestTSCSIBufferInterpreter.TestLargeBufferToSMARTValueList;
var
  Buffer: TLargeBuffer;
begin
  StartExpectingException(ENotSupportedException);
  FSCSIBufferInterpreter.LargeBufferToSMARTValueList(Buffer);
  StopExpectingException;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSCSIBufferInterpreter.Suite);
end.

