unit TestAverageWriteLogger;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, uAverageLogger, uAverageWriteLogger,
  TestAverageCountLogger, Sysutils, Classes;

type
  // Test methods for class TAverageWriteLogger
  TestTAverageWriteLogger = class(TTestCase)
  public
    procedure SetUp; override;
  private
    AverageWriteLogger: TAverageWriteLogger;
    UserDefaultFormat: TFormatSettings;
    procedure TestByExpectedValue(Input: TInput;
      ExpectedResult: TExpectedValue; ListCheckFunction: TListCheckFunction);
    procedure CheckEquality(TodayDelta: String; OutputList: TStringList;
      PeriodAverageResult: TPeriodAverage; ExpectedResult: TExpectedValue;
      ListCheckFunction: TListCheckFunction);
  published
    procedure Test0064Unit;
  end;

implementation

procedure TestTAverageWriteLogger.SetUp;
begin
  UserDefaultFormat := TFormatSettings.Create(GetUserDefaultLCID);
  UserDefaultFormat.DateSeparator := '-';
end;

procedure TestTAverageWriteLogger.Test0064Unit;
  function ListCheckFunction(Input: TStringList): Boolean;
  begin
    result :=
      (Input.Count = 4) and
      (Input[1] = '200') and
      (Input[3] = '100');
  end;
const
  ExpectedInThisScenario: TExpectedValue =
    (TodayDelta: '6.4'; Period: Days30; FormattedAverageValue: '3.2');
var
  Input: TInput;
begin
  Input.FileContents := TStringList.Create;
  Input.FileContents.Add(FormatDateTime('yy/mm/dd', Now - 1));
  Input.FileContents.Add('100');
  Input.NewValue := '200';
  TestByExpectedValue(Input, ExpectedInThisScenario, @ListCheckFunction);
end;

procedure TestTAverageWriteLogger.TestByExpectedValue(
  Input: TInput; ExpectedResult: TExpectedValue;
  ListCheckFunction: TListCheckFunction);
var
  PeriodAverageResult: TPeriodAverage;
begin
  AverageWriteLogger := TAverageWriteLogger.Create(Input.FileContents);
  AverageWriteLogger.ReadAndRefresh(Input.NewValue);
  PeriodAverageResult := AverageWriteLogger.GetMaxPeriodFormattedAverage;
  CheckEquality(AverageWriteLogger.GetFormattedTodayDelta, Input.FileContents,
    PeriodAverageResult, ExpectedResult, @ListCheckFunction);
  FreeAndNil(AverageWriteLogger);
end;

procedure TestTAverageWriteLogger.CheckEquality(
  TodayDelta: String; OutputList: TStringList;
  PeriodAverageResult: TPeriodAverage; ExpectedResult: TExpectedValue;
  ListCheckFunction: TListCheckFunction);
begin
  CheckEqualsString(ExpectedResult.TodayDelta,
    AverageWriteLogger.GetFormattedTodayDelta, 'TodayDelta');
  CheckEquals(Ord(ExpectedResult.Period),
    Ord(PeriodAverageResult.Period), 'Period');
  CheckEqualsString(ExpectedResult.FormattedAverageValue,
    PeriodAverageResult.FormattedAverageValue, 'AverageValue');
  if @ListCheckFunction <> nil then
    CheckTrue(ListCheckFunction(OutputList), 'ListCheckFunction');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAverageWriteLogger.Suite);
end.

