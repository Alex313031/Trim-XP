unit TestOSFile.IoControl;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, OSFile.IoControl, OSFile.Handle, Windows;

type
  // Test methods for class TIoControlFile
  TConcreteIoControlFile = class(TIoControlFile)
  protected
    function GetMinimumPrivilege: TCreateFileDesiredAccess; override;
  end;

  TestTIoControlFile = class(TTestCase)
  strict private
    FIoControlFile: TConcreteIoControlFile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBuildOSBufferBy;
    procedure TestBuildOSBufferByOutput;
    procedure TestNormalOSControlCode;
    procedure TestUnknownIoControlCode;
    procedure TestIntMax;
  end;

implementation

procedure TestTIoControlFile.SetUp;
begin
  FIoControlFile := TConcreteIoControlFile.Create('');
end;

procedure TestTIoControlFile.TearDown;
begin
  FIoControlFile.Free;
  FIoControlFile := nil;
end;

procedure TestTIoControlFile.TestBuildOSBufferBy;
var
  ReturnValue: TIoControlIOBuffer;
  OutputBuffer: Integer;
  InputBuffer: Integer;
begin
  ReturnValue :=
    FIoControlFile.BuildOSBufferBy<Integer, Integer>(InputBuffer, OutputBuffer);
  CheckEquals(NativeUInt(@InputBuffer),
    NativeUInt(ReturnValue.InputBuffer.Buffer), 'InputBuffer Pointer');
  CheckEquals(NativeUInt(@OutputBuffer),
    NativeUInt(ReturnValue.OutputBuffer.Buffer), 'OutputBuffer Pointer');
end;

procedure TestTIoControlFile.TestBuildOSBufferByOutput;
var
  ReturnValue: TIoControlIOBuffer;
  OutputBuffer: Integer;
begin
  ReturnValue :=
    FIoControlFile.BuildOSBufferByOutput<Integer>(OutputBuffer);
  CheckEquals(NativeUInt(nil),
    NativeUInt(ReturnValue.InputBuffer.Buffer), 'InputBuffer Pointer');
  CheckEquals(NativeUInt(@OutputBuffer),
    NativeUInt(ReturnValue.OutputBuffer.Buffer), 'OutputBuffer Pointer');
end;

procedure TestTIoControlFile.TestNormalOSControlCode;
const
  IOCTL_SCSI_BASE = FILE_DEVICE_CONTROLLER;
  IOCTL_STORAGE_BASE = $2D;
  IOCTL_ATA_PASS_THROUGH =
    (IOCTL_SCSI_BASE shl 16) or
    ((FILE_READ_ACCESS or FILE_WRITE_ACCESS) shl 14) or ($040B shl 2) or
    (METHOD_BUFFERED);
  IOCTL_ATA_PASS_THROUGH_DIRECT = $4D030;
  IOCTL_SCSI_PASS_THROUGH =
    (IOCTL_SCSI_BASE shl 16) or
    ((FILE_READ_ACCESS or FILE_WRITE_ACCESS) shl 14) or ($0401 shl 2) or
    (METHOD_BUFFERED);
  IOCTL_SCSI_MINIPORT =
    (IOCTL_SCSI_BASE shl 16) or
    ((FILE_READ_ACCESS or FILE_WRITE_ACCESS) shl 14) or ($0402 shl 2) or
    (METHOD_BUFFERED);
  IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES =
    (IOCTL_STORAGE_BASE shl 16) or
    (FILE_WRITE_ACCESS shl 14) or ($0501 shl 2) or
    (METHOD_BUFFERED);
  IOCTL_SCSI_GET_ADDRESS =
    (IOCTL_SCSI_BASE shl 16) or
    (FILE_ANY_ACCESS shl 14) or ($0406 shl 2) or
    (METHOD_BUFFERED);
begin
  CheckEquals(
    IOCTL_ATA_PASS_THROUGH,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.ATAPassThrough),
    'ATAPassThrough');
  CheckEquals(
    IOCTL_ATA_PASS_THROUGH_DIRECT,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.ATAPassThroughDirect),
    'ATAPassThroughDirect');
  CheckEquals(
    IOCTL_SCSI_PASS_THROUGH,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.SCSIPassThrough),
    'SCSIPassThrough');
  CheckEquals(
    IOCTL_STORAGE_QUERY_PROPERTY,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.StorageQueryProperty),
    'StorageQueryProperty');
  CheckEquals(
    IOCTL_STORAGE_CHECK_VERIFY,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.StorageCheckVerify),
    'StorageCheckVerify');
  CheckEquals(
    FSCTL_GET_VOLUME_BITMAP,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.GetVolumeBitmap),
    'GetVolumeBitmap');
  CheckEquals(
    IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.GetVolumeDiskExtents),
    'GetVolumeDiskExtents');
  CheckEquals(
    FSCTL_GET_NTFS_VOLUME_DATA,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.GetNTFSVolumeData),
    'GetNTFSVolumeData');
  CheckEquals(
    IOCTL_DISK_GET_DRIVE_GEOMETRY_EX,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.GetDriveGeometryEX),
    'GetDriveGeometryEX');
  CheckEquals(
    IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.OSLevelTrim),
    'OSLevelTrim');
  CheckEquals(
    IOCTL_SCSI_MINIPORT,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.ScsiMiniport),
    'ScsiMiniport');
  CheckEquals(
    IOCTL_SCSI_GET_ADDRESS,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.GetScsiAddress),
    'GetScsiAddress');
end;

procedure TestTIoControlFile.TestIntMax;
begin
  StartExpectingException(EInvalidIoControlCode);
  CheckEquals(
    0,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode(Integer.MaxValue)),
    'Out of range');
  StopExpectingException('ControlCode: Integer.MaxValue');
end;

procedure TestTIoControlFile.TestUnknownIoControlCode;
begin
  StartExpectingException(EInvalidIoControlCode);
  CheckEquals(
    0,
    FIoControlFile.TDeviceIoControlCodeToOSControlCode(
      TIoControlCode.Unknown),
    'Unknown');
  StopExpectingException('ControlCode: TIoControlCode.Unknown');
end;

{ TConcreteIoControlFile }

function TConcreteIoControlFile.GetMinimumPrivilege: TCreateFileDesiredAccess;
begin
  result := TCreateFileDesiredAccess.DesiredNone;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTIoControlFile.Suite);
end.

