unit TestBufferInterpreter.NVMe.Intel;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Device.SMART.List, SysUtils,
  BufferInterpreter, BufferInterpreter.NVMe.Intel;

type
  // Test methods for class TIntelBufferInterpreter

  TestTIntelBufferInterpreter = class(TTestCase)
  strict private
    FIntelBufferInterpreter: TIntelBufferInterpreter;
  private
    procedure CompareWithOriginalIdentify(
      const ReturnValue: TIdentifyDeviceResult);
    procedure CompareWithOriginalSMART(const ReturnValue: TSMARTValueList);
    procedure CheckIDEquals(const Expected, Actual: TSMARTValueEntry;
      const Msg: String);
    procedure CompareWithOriginalIntelSMART(const ReturnValue: TSMARTValueList);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBufferToIdentifyDeviceResult;
    procedure TestBufferToSMARTValueList;
    procedure TestLargeBufferToIdentifyDeviceResult;
    procedure TestLargeBufferToSMARTValueList;
    procedure TestBufferToCapacityAndLBA;
    procedure TestVendorSpecificSMARTValueList;
  end;

const
  Intel750IdentifyDevice: TSmallBuffer =
    ($86,$80,$86,$80,$43,$56,$43,$51,$35,$33,$30,$34,$30,$30,$41,$50,$34,$30,$30,$41
    ,$47,$4E,$20,$20,$49,$4E,$54,$45,$4C,$20,$53,$53,$44,$50,$45,$44,$4D,$57,$34,$30
    ,$30,$47,$34,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
    ,$20,$20,$20,$20,$38,$45,$56,$31,$30,$31,$37,$34,$00,$E4,$D2,$5C,$00,$05,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$03,$03
    ,$02,$02,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  Intel750SMART: TSmallBuffer =
    ($00,$31,$01,$64,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$98,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$8B,$1C,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$E1,$88,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$75,$8A,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$81,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$2A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  Intel750Capacity: TSmallBuffer =
    ($00,$00,$00,$00,$2E,$93,$90,$AF,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  Intel750AdditionalSMART: TSmallBuffer =
    ($AB,$00,$00,$64,$00,$00,$00,$00,$00,$00,$00,$00
    ,$AC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$AD,$00,$00,$00,$00,$01,$00,$05,$00,$03,$00,$00
    ,$B8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$C7,$00,$00,$00,$00,$63,$00,$00,$00,$00,$00,$00
    ,$E2,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00
    ,$E3,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00
    ,$E4,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00
    ,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$F3,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00
    ,$F4,$00,$00,$00,$00,$CA,$5B,$00,$00,$00,$00,$00
    ,$F5,$00,$00,$00,$00,$76,$08,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    ,$00,$00,$00,$00,$00,$00,$00,$00);

implementation

procedure TestTIntelBufferInterpreter.SetUp;
begin
  FIntelBufferInterpreter := TIntelBufferInterpreter.Create;
end;

procedure TestTIntelBufferInterpreter.TearDown;
begin
  FIntelBufferInterpreter.Free;
  FIntelBufferInterpreter := nil;
end;

procedure TestTIntelBufferInterpreter.TestBufferToIdentifyDeviceResult;
var
  ReturnValue: TIdentifyDeviceResult;
  Buffer: TSmallBuffer;
begin
  StartExpectingException(ESmallBufferException);
  ReturnValue := FIntelBufferInterpreter.BufferToIdentifyDeviceResult(Buffer);
  StopExpectingException;
end;

procedure TestTIntelBufferInterpreter.TestBufferToSMARTValueList;
var
  Buffer: TSmallBuffer;
begin
  StartExpectingException(ESmallBufferException);
  FIntelBufferInterpreter.BufferToSMARTValueList(Buffer);
  StopExpectingException;
end;

procedure TestTIntelBufferInterpreter.TestLargeBufferToIdentifyDeviceResult;
var
  ReturnValue: TIdentifyDeviceResult;
  Buffer: TLargeBuffer;
begin
  FillChar(Buffer, SizeOf(Buffer), #0);
  Move(Intel750IdentifyDevice, Buffer, SizeOf(Intel750IdentifyDevice));
  ReturnValue :=
    FIntelBufferInterpreter.LargeBufferToIdentifyDeviceResult(Buffer);
  CompareWithOriginalIdentify(ReturnValue);
end;

procedure TestTIntelBufferInterpreter.CompareWithOriginalIdentify(
  const ReturnValue: TIdentifyDeviceResult);
begin
  CheckEquals('INTEL SSDPEDMW400G4', ReturnValue.Model);
  CheckEquals('8EV10174', ReturnValue.Firmware);
  CheckEquals('CVCQ530400AP400AGN', ReturnValue.Serial);
  CheckTrue(TSATASpeed.NotSATA = ReturnValue.SATASpeed,
    'TSATASpeed.NotSATA = ReturnValue.SATASpeed');
  CheckEquals(512, ReturnValue.LBASize);
end;

procedure TestTIntelBufferInterpreter.TestLargeBufferToSMARTValueList;
var
  ReturnValue: TSMARTValueList;
  Buffer: TLargeBuffer;
begin
  FillChar(Buffer, SizeOf(Buffer), #0);
  Move(Intel750SMART, Buffer, SizeOf(Intel750SMART));
  ReturnValue := FIntelBufferInterpreter.LargeBufferToSMARTValueList(Buffer);
  CompareWithOriginalSMART(ReturnValue);
end;

procedure TestTIntelBufferInterpreter.CheckIDEquals(
  const Expected, Actual: TSMARTValueEntry;
  const Msg: String);
begin
  CheckEquals(Expected.ID, Actual.ID, Msg);
  CheckEquals(Expected.Current, Actual.Current, Msg);
  CheckEquals(Expected.Worst, Actual.Worst, Msg);
  CheckEquals(Expected.Threshold, Actual.Threshold, Msg);
  CheckEquals(Expected.RAW, Actual.RAW, Msg);
end;

procedure TestTIntelBufferInterpreter.CompareWithOriginalSMART(
  const ReturnValue: TSMARTValueList);
const
  ID0: TSMARTValueEntry = (ID: 1; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID1: TSMARTValueEntry = (ID: 2; Current: 0; Worst: 0; Threshold: 0; RAW: 305);
  ID2: TSMARTValueEntry = (ID: 3; Current: 0; Worst: 0; Threshold: 10; RAW: 100);
  ID3: TSMARTValueEntry = (ID: 4; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID4: TSMARTValueEntry = (ID: 5; Current: 0; Worst: 0; Threshold: 0; RAW: 1176);
  ID5: TSMARTValueEntry = (ID: 6; Current: 0; Worst: 0; Threshold: 0; RAW: 138379);
  ID6: TSMARTValueEntry = (ID: 7; Current: 0; Worst: 0; Threshold: 0; RAW: 35041);
  ID7: TSMARTValueEntry = (ID: 8; Current: 0; Worst: 0; Threshold: 0; RAW: 1084021);
  ID8: TSMARTValueEntry = (ID: 9; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID9: TSMARTValueEntry = (ID: 10; Current: 0; Worst: 0; Threshold: 0; RAW: 129);
  ID10: TSMARTValueEntry = (ID: 11; Current: 0; Worst: 0; Threshold: 0; RAW: 248);
  ID11: TSMARTValueEntry = (ID: 12; Current: 0; Worst: 0; Threshold: 0; RAW: 42);
  ID12: TSMARTValueEntry = (ID: 13; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID13: TSMARTValueEntry = (ID: 14; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
begin
  CheckEquals(14, ReturnValue.Count, 'ReturnValue.Count');
  CheckIDEquals(ID0, ReturnValue[0], 'ReturnValue[0]');
  CheckIDEquals(ID1, ReturnValue[1], 'ReturnValue[1]');
  CheckIDEquals(ID2, ReturnValue[2], 'ReturnValue[2]');
  CheckIDEquals(ID3, ReturnValue[3], 'ReturnValue[3]');
  CheckIDEquals(ID4, ReturnValue[4], 'ReturnValue[4]');
  CheckIDEquals(ID5, ReturnValue[5], 'ReturnValue[5]');
  CheckIDEquals(ID6, ReturnValue[6], 'ReturnValue[6]');
  CheckIDEquals(ID7, ReturnValue[7], 'ReturnValue[7]');
  CheckIDEquals(ID8, ReturnValue[8], 'ReturnValue[8]');
  CheckIDEquals(ID9, ReturnValue[9], 'ReturnValue[9]');
  CheckIDEquals(ID10, ReturnValue[10], 'ReturnValue[10]');
  CheckIDEquals(ID11, ReturnValue[11], 'ReturnValue[11]');
  CheckIDEquals(ID12, ReturnValue[12], 'ReturnValue[12]');
  CheckIDEquals(ID13, ReturnValue[13], 'ReturnValue[13]');
end;

procedure TestTIntelBufferInterpreter.TestBufferToCapacityAndLBA;
var
  ReturnValue: TIdentifyDeviceResult;
  Buffer: TSmallBuffer;
begin
  Buffer := Intel750Capacity;
  ReturnValue := FIntelBufferInterpreter.BufferToCapacityAndLBA(Buffer);
  CheckEquals(ReturnValue.UserSizeInKB, 400088457);
  CheckEquals(ReturnValue.LBASize, 512);
end;

procedure TestTIntelBufferInterpreter.TestVendorSpecificSMARTValueList;
var
  ReturnValue: TSMARTValueList;
  Buffer: TLargeBuffer;
begin
  FillChar(Buffer, SizeOf(Buffer), #0);
  Move(Intel750AdditionalSMART, Buffer, SizeOf(Intel750AdditionalSMART));
  ReturnValue := FIntelBufferInterpreter.VendorSpecificSMARTValueList(Buffer);
  CompareWithOriginalIntelSMART(ReturnValue);
end;

procedure TestTIntelBufferInterpreter.CompareWithOriginalIntelSMART(
  const ReturnValue: TSMARTValueList);
const
  ID0: TSMARTValueEntry = (ID: 171; Current: 100; Worst: 0; Threshold: 0; RAW: 0);
  ID1: TSMARTValueEntry = (ID: 172; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID2: TSMARTValueEntry = (ID: 173; Current: 0; Worst: 0; Threshold: 0; RAW: 12885229569);
  ID3: TSMARTValueEntry = (ID: 184; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID4: TSMARTValueEntry = (ID: 199; Current: 0; Worst: 0; Threshold: 0; RAW: 99);
  ID5: TSMARTValueEntry = (ID: 226; Current: 0; Worst: 0; Threshold: 0; RAW: 65535);
  ID6: TSMARTValueEntry = (ID: 227; Current: 0; Worst: 0; Threshold: 0; RAW: 65535);
  ID7: TSMARTValueEntry = (ID: 228; Current: 0; Worst: 0; Threshold: 0; RAW: 65535);
  ID8: TSMARTValueEntry = (ID: 234; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID9: TSMARTValueEntry = (ID: 240; Current: 0; Worst: 0; Threshold: 0; RAW: 0);
  ID10: TSMARTValueEntry = (ID: 243; Current: 0; Worst: 0; Threshold: 0; RAW: 1);
  ID11: TSMARTValueEntry = (ID: 244; Current: 0; Worst: 0; Threshold: 0; RAW: 23498);
  ID12: TSMARTValueEntry = (ID: 245; Current: 0; Worst: 0; Threshold: 0; RAW: 2166);
begin
  CheckEquals(13, ReturnValue.Count, 'ReturnValue.Count');
  CheckIDEquals(ID0, ReturnValue[0], 'ReturnValue[0]');
  CheckIDEquals(ID1, ReturnValue[1], 'ReturnValue[1]');
  CheckIDEquals(ID2, ReturnValue[2], 'ReturnValue[2]');
  CheckIDEquals(ID3, ReturnValue[3], 'ReturnValue[3]');
  CheckIDEquals(ID4, ReturnValue[4], 'ReturnValue[4]');
  CheckIDEquals(ID5, ReturnValue[5], 'ReturnValue[5]');
  CheckIDEquals(ID6, ReturnValue[6], 'ReturnValue[6]');
  CheckIDEquals(ID7, ReturnValue[7], 'ReturnValue[7]');
  CheckIDEquals(ID8, ReturnValue[8], 'ReturnValue[8]');
  CheckIDEquals(ID9, ReturnValue[9], 'ReturnValue[9]');
  CheckIDEquals(ID10, ReturnValue[10], 'ReturnValue[10]');
  CheckIDEquals(ID11, ReturnValue[11], 'ReturnValue[11]');
  CheckIDEquals(ID12, ReturnValue[12], 'ReturnValue[12]');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTIntelBufferInterpreter.Suite);
end.

